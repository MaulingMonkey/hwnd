use winapi::um::errhandlingapi::GetLastError;
use std::fmt::{self, Debug, Display, Formatter};



/// An error generated by the `hwnd` crate
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Error(pub(crate) u32);

impl Error {
    pub(crate) fn new_gle() -> Self {
        Self(unsafe { GetLastError() } as _)
    }

    pub(crate) fn new_gle_nz() -> Result<(), Self> {
        let e = unsafe { GetLastError() };
        if e == 0 { Ok(()) } else { Err(Self(e as _)) }
    }

    pub const fn to_u32(&self) -> u32 { self.0 }

    pub fn code(&self) -> Option<winresult::ErrorCodeMicrosoft> {
        u16::try_from(self.0).ok().map(|c| winresult::ErrorCodeMicrosoft::from(c))
    }
}

impl Debug for Error {
    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {
        if let Some(code) = self.code() {
            write!(fmt, "hwnd::Error({code:?})")
        } else {
            let hr = winresult::HRESULT::from(self.0);
            write!(fmt, "hwnd::Error({hr:?})")
        }
    }
}

impl Display for Error {
    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {
        if let Some(code) = self.code() {
            write!(fmt, "error handling HWNDs: {code:?}")
        } else {
            let hr = winresult::HRESULT::from(self.0);
            write!(fmt, "error handling HWNDs: {hr:?}")
        }
    }
}

impl PartialEq<winresult::ErrorCodeMicrosoft   > for Error { fn eq(&self, other: &winresult::ErrorCodeMicrosoft   ) -> bool { self.to_u32() == other.to_u32() } }
impl PartialEq<winresult::ErrorHResult         > for Error { fn eq(&self, other: &winresult::ErrorHResult         ) -> bool { self.to_u32() == other.to_u32() } }
impl PartialEq<Error> for winresult::ErrorCodeMicrosoft    { fn eq(&self, other: &Error                        ) -> bool { self.to_u32() == other.to_u32() } }
impl PartialEq<Error> for winresult::ErrorHResult          { fn eq(&self, other: &Error                        ) -> bool { self.to_u32() == other.to_u32() } }
